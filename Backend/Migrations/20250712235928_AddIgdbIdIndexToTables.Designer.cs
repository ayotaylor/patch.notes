// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250712235928_AddIgdbIdIndexToTables")]
    partial class AddIgdbIdIndexToTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Provider")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("Provider", "ProviderId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Game.AltName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("AltNames");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GameAgeRating", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AgeRatingId")
                        .HasColumnType("char(36)");

                    b.HasKey("GameId", "AgeRatingId");

                    b.HasIndex("AgeRatingId");

                    b.ToTable("GameAgeRatings");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GameCompany", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Developer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IgdbId")
                        .HasColumnType("int");

                    b.Property<bool>("Porting")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Publisher")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Supporting")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("GameId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Developer");

                    b.HasIndex("Porting");

                    b.HasIndex("Publisher");

                    b.HasIndex("Supporting");

                    b.ToTable("GameCompanies");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("char(36)");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GameModeGame", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GameModeId")
                        .HasColumnType("char(36)");

                    b.HasKey("GameId", "GameModeId");

                    b.HasIndex("GameModeId");

                    b.ToTable("GameModeGames");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("char(36)");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GamePlayerPerspective", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlayerPerspectiveId")
                        .HasColumnType("char(36)");

                    b.HasKey("GameId", "PlayerPerspectiveId");

                    b.HasIndex("PlayerPerspectiveId");

                    b.ToTable("GamePlayerPerspectives");
                });

            modelBuilder.Entity("Backend.Models.Game.Cover", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("ImageId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IgdbId");

                    b.ToTable("Covers");
                });

            modelBuilder.Entity("Backend.Models.Game.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<long?>("FirstReleaseDate")
                        .HasColumnType("bigint");

                    b.Property<Guid>("GameTypeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Hypes")
                        .HasColumnType("int");

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Rating")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Storyline")
                        .HasColumnType("longtext");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("IgdbId")
                        .IsUnique()
                        .HasFilter("[IgdbId] IS NOT NULL");

                    b.HasIndex("Name");

                    b.HasIndex("Rating");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.AgeRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AgeRatingCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingCategoryId");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.ToTable("AgeRatings");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.AgeRatingCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("RatingOrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.HasIndex("RatingOrganizationId");

                    b.ToTable("AgeRatingCategories");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.Franchise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.HasIndex("Slug");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.GameFranchise", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FranchiseId")
                        .HasColumnType("char(36)");

                    b.HasKey("GameId", "FranchiseId");

                    b.HasIndex("FranchiseId");

                    b.ToTable("GameFranchises");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.GameType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.HasIndex("Slug");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.HasIndex("Slug");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.PlayerPerspective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.ToTable("PlayerPerspectives");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.RatingOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.ToTable("RatingOrganizations");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.ReleaseDateRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GameDlc", b =>
                {
                    b.Property<Guid>("ParentGameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DlcGameId")
                        .HasColumnType("char(36)");

                    b.HasKey("ParentGameId", "DlcGameId");

                    b.HasIndex("DlcGameId");

                    b.ToTable("GameDlcs");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GameExpansion", b =>
                {
                    b.Property<Guid>("ParentGameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ExpansionGameId")
                        .HasColumnType("char(36)");

                    b.HasKey("ParentGameId", "ExpansionGameId");

                    b.HasIndex("ExpansionGameId");

                    b.ToTable("GameExpansions");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GamePort", b =>
                {
                    b.Property<Guid>("OriginalGameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PortGameId")
                        .HasColumnType("char(36)");

                    b.HasKey("OriginalGameId", "PortGameId");

                    b.HasIndex("PortGameId");

                    b.ToTable("GamePorts");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GameRemake", b =>
                {
                    b.Property<Guid>("OriginalGameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RemakeGameId")
                        .HasColumnType("char(36)");

                    b.HasKey("OriginalGameId", "RemakeGameId");

                    b.HasIndex("RemakeGameId");

                    b.ToTable("GameRemakes");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GameRemaster", b =>
                {
                    b.Property<Guid>("OriginalGameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RemasterGameId")
                        .HasColumnType("char(36)");

                    b.HasKey("OriginalGameId", "RemasterGameId");

                    b.HasIndex("RemasterGameId");

                    b.ToTable("GameRemasters");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.SimilarGame", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SimilarGameId")
                        .HasColumnType("char(36)");

                    b.HasKey("GameId", "SimilarGameId");

                    b.HasIndex("SimilarGameId");

                    b.ToTable("SimilarGames");
                });

            modelBuilder.Entity("Backend.Models.Game.ReleaseDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("RegionId");

                    b.ToTable("ReleaseDates");
                });

            modelBuilder.Entity("Backend.Models.Game.Screenshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("ImageId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Screenshots");
                });

            modelBuilder.Entity("Backend.Models.Social.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId", "GameId")
                        .IsUnique();

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Backend.Models.Social.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId", "GameId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Game.Models.ReferenceModels.GameMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<int>("IgdbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("Id");

                    b.HasIndex("IgdbId")
                        .IsUnique();

                    b.ToTable("GameModes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(95)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsProfileUpdated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileUrlImageUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Backend.Models.Game.AltName", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("AltNames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GameAgeRating", b =>
                {
                    b.HasOne("Backend.Models.Game.ReferenceModels.AgeRating", "AgeRating")
                        .WithMany("GameAgeRatings")
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("GameAgeRatings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeRating");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GameCompany", b =>
                {
                    b.HasOne("Backend.Models.Game.ReferenceModels.Company", "Company")
                        .WithMany("GameCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("GameCompanies")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GameGenre", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.ReferenceModels.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GameModeGame", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("GameModes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Models.ReferenceModels.GameMode", "GameMode")
                        .WithMany("GameModeGames")
                        .HasForeignKey("GameModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameMode");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GamePlatform", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.ReferenceModels.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Backend.Models.Game.Associations.GamePlayerPerspective", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("GamePlayerPerspectives")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.ReferenceModels.PlayerPerspective", "PlayerPerspective")
                        .WithMany("GamePlayerPerspectives")
                        .HasForeignKey("PlayerPerspectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("PlayerPerspective");
                });

            modelBuilder.Entity("Backend.Models.Game.Cover", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("Covers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Backend.Models.Game.Game", b =>
                {
                    b.HasOne("Backend.Models.Game.ReferenceModels.GameType", "GameType")
                        .WithMany("Games")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.AgeRating", b =>
                {
                    b.HasOne("Backend.Models.Game.ReferenceModels.AgeRatingCategory", "AgeRatingCategory")
                        .WithMany("AgeRatings")
                        .HasForeignKey("AgeRatingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeRatingCategory");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.AgeRatingCategory", b =>
                {
                    b.HasOne("Backend.Models.Game.ReferenceModels.RatingOrganization", "RatingOrganization")
                        .WithMany("AgeRatingCategory")
                        .HasForeignKey("RatingOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatingOrganization");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.GameFranchise", b =>
                {
                    b.HasOne("Backend.Models.Game.ReferenceModels.Franchise", "Franchise")
                        .WithMany("GameFranchises")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("GameFranchises")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GameDlc", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "DlcGame")
                        .WithMany("DlcGames")
                        .HasForeignKey("DlcGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.Game", "ParentGame")
                        .WithMany("ParentGameDlcs")
                        .HasForeignKey("ParentGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DlcGame");

                    b.Navigation("ParentGame");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GameExpansion", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "ExpansionGame")
                        .WithMany("ExpansionGames")
                        .HasForeignKey("ExpansionGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.Game", "ParentGame")
                        .WithMany("ParentGameExpansions")
                        .HasForeignKey("ParentGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExpansionGame");

                    b.Navigation("ParentGame");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GamePort", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "OriginalGame")
                        .WithMany("OriginalGamePorts")
                        .HasForeignKey("OriginalGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.Game", "PortGame")
                        .WithMany("PortGames")
                        .HasForeignKey("PortGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginalGame");

                    b.Navigation("PortGame");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GameRemake", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "OriginalGame")
                        .WithMany("OriginalGameRemakes")
                        .HasForeignKey("OriginalGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.Game", "RemakeGame")
                        .WithMany("RemakeGames")
                        .HasForeignKey("RemakeGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginalGame");

                    b.Navigation("RemakeGame");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.GameRemaster", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "OriginalGame")
                        .WithMany("OriginalGameRemasters")
                        .HasForeignKey("OriginalGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.Game", "RemasterGame")
                        .WithMany("RemasterGames")
                        .HasForeignKey("RemasterGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginalGame");

                    b.Navigation("RemasterGame");
                });

            modelBuilder.Entity("Backend.Models.Game.Relationships.SimilarGame", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("SimilarGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.Game", "SimilarGameRef")
                        .WithMany("SimilarToGames")
                        .HasForeignKey("SimilarGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("SimilarGameRef");
                });

            modelBuilder.Entity("Backend.Models.Game.ReleaseDate", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("ReleaseDates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.ReferenceModels.Platform", "Platform")
                        .WithMany("ReleaseDates")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game.ReferenceModels.ReleaseDateRegion", "ReleaseDateRegion")
                        .WithMany("ReleaseDates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");

                    b.Navigation("ReleaseDateRegion");
                });

            modelBuilder.Entity("Backend.Models.Game.Screenshot", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("Screenshots")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Backend.Models.Social.Favorite", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("Favorites")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserProfile", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Social.Like", b =>
                {
                    b.HasOne("Backend.Models.Game.Game", "Game")
                        .WithMany("Likes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserProfile", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Backend.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Backend.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Backend.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserProfile", b =>
                {
                    b.HasOne("Backend.Models.Auth.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Auth.User", b =>
                {
                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Backend.Models.Game.Game", b =>
                {
                    b.Navigation("AltNames");

                    b.Navigation("Covers");

                    b.Navigation("DlcGames");

                    b.Navigation("ExpansionGames");

                    b.Navigation("Favorites");

                    b.Navigation("GameAgeRatings");

                    b.Navigation("GameCompanies");

                    b.Navigation("GameFranchises");

                    b.Navigation("GameGenres");

                    b.Navigation("GameModes");

                    b.Navigation("GamePlatforms");

                    b.Navigation("GamePlayerPerspectives");

                    b.Navigation("Likes");

                    b.Navigation("OriginalGamePorts");

                    b.Navigation("OriginalGameRemakes");

                    b.Navigation("OriginalGameRemasters");

                    b.Navigation("ParentGameDlcs");

                    b.Navigation("ParentGameExpansions");

                    b.Navigation("PortGames");

                    b.Navigation("ReleaseDates");

                    b.Navigation("RemakeGames");

                    b.Navigation("RemasterGames");

                    b.Navigation("Screenshots");

                    b.Navigation("SimilarGames");

                    b.Navigation("SimilarToGames");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.AgeRating", b =>
                {
                    b.Navigation("GameAgeRatings");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.AgeRatingCategory", b =>
                {
                    b.Navigation("AgeRatings");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.Company", b =>
                {
                    b.Navigation("GameCompanies");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.Franchise", b =>
                {
                    b.Navigation("GameFranchises");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.GameType", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.Platform", b =>
                {
                    b.Navigation("GamePlatforms");

                    b.Navigation("ReleaseDates");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.PlayerPerspective", b =>
                {
                    b.Navigation("GamePlayerPerspectives");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.RatingOrganization", b =>
                {
                    b.Navigation("AgeRatingCategory");
                });

            modelBuilder.Entity("Backend.Models.Game.ReferenceModels.ReleaseDateRegion", b =>
                {
                    b.Navigation("ReleaseDates");
                });

            modelBuilder.Entity("Game.Models.ReferenceModels.GameMode", b =>
                {
                    b.Navigation("GameModeGames");
                });

            modelBuilder.Entity("UserProfile", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
